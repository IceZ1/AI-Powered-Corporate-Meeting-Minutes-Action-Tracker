name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Run every Monday at 2 AM UTC

jobs:
  test:
    name: 🔍 Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort mypy

    - name: 🎨 Code Formatting Check
      run: |
        black --check --diff .
        isort --check-only --diff .

    - name: 🔍 Lint Code
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: 🧪 Type Checking
      run: |
        mypy --install-types --non-interactive --ignore-missing-imports .

    - name: 🧪 Run Tests
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: 🔒 Check Dependencies for Vulnerabilities
      run: |
        safety check --json

    - name: 🛡️ Security Linting
      run: |
        bandit -r . -f json -o bandit-report.json -ll || true

    - name: 📊 Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🧪 Test Application Startup
      run: |
        timeout 30s python app.py &
        sleep 10
        curl -f http://localhost:5000 || exit 1

    - name: 📦 Build Distribution
      run: |
        pip install build
        python -m build

    - name: 📊 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: helm upgrade corpmeet-ai ./helm-chart

    - name: 🧪 Health Check
      run: |
        echo "🔍 Running health checks..."
        # Add health check commands here
        # Example: curl -f https://staging.corpmeet-ai.com/health

  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: ⚡ Run Performance Tests
      run: |
        # Start the application in background
        python app.py &
        sleep 10
        
        # Run performance tests
        locust --headless --users 10 --spawn-rate 2 --run-time 1m --host http://localhost:5000 -f tests/performance/locustfile.py || true

    - name: 📊 Upload Performance Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: performance-results/

  accessibility:
    name: ♿ Accessibility Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 📦 Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🔧 Install Axe CLI
      run: |
        npm install -g @axe-core/cli

    - name: 🚀 Start Application
      run: |
        python app.py &
        sleep 10

    - name: ♿ Run Accessibility Tests
      run: |
        axe http://localhost:5000 --tags wcag2a,wcag2aa --reporter json --output-file axe-results.json || true

    - name: 📊 Upload Accessibility Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-results
        path: axe-results.json

  release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ Generate Tag
      id: tag
      run: |
        VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
        echo "version=v$VERSION" >> $GITHUB_OUTPUT

    - name: 📝 Generate Changelog
      id: changelog
      run: |
        # Generate changelog since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" --since="1 week ago")
        else
          CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🚀 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.version }}
        release_name: Release ${{ steps.tag.outputs.version }}
        body: |
          ## 🎉 What's New in ${{ steps.tag.outputs.version }}

          ${{ steps.changelog.outputs.changelog }}

          ## 🚀 Quick Start

          ```bash
          git clone https://github.com/Jani-shiv/AI-Powered-Corporate-Meeting-Minutes-Action-Tracker.git
          cd AI-Powered-Corporate-Meeting-Minutes-Action-Tracker
          pip install -r requirements.txt
          python app.py
          ```

          ## 📦 Docker

          ```bash
          docker run -p 5000:5000 ghcr.io/jani-shiv/ai-powered-corporate-meeting-minutes-action-tracker:${{ steps.tag.outputs.version }}
          ```

          **Full Changelog**: https://github.com/Jani-shiv/AI-Powered-Corporate-Meeting-Minutes-Action-Tracker/compare/${{ github.event.before }}...${{ github.sha }}
        draft: false
        prerelease: false